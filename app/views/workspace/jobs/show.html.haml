-#  Copyright (C) 2013, 2014, 2015 Dr. Thomas Schank  (DrTom@schank.ch, Thomas.Schank@algocon.ch)
-#  Licensed under the terms of the GNU Affero General Public License v3.
-#  See the LICENSE.txt file provided with this software.

:ruby
  job ||= @job
  state = job.state
  jcs = job.job_cache_signature
  ccs = CommitCacheSignature.where(%< commit_id IN (?) >, job.commits.map(&:id))
  relevant_ccs = [ccs.map(&:commit_id), ccs.map(&:branches_signature),
    ccs.map(&:repositories_signature), ccs.map(&:jobs_signature)].flatten


  cache_signature = CacheSignature.signature current_user, job.cache_signature,
    jcs.repositories_signature, jcs.branches_signature, jcs.tasks_signature,
    jcs.job_issues_count, params, @trials.collection_cache_signature, relevant_ccs

- cache cache_signature do

  - tasks ||= @tasks
  - reload_timeout= session_adjust_reload_timeout(%w(failed passed).include?(job.state) ? 30 : 3)
  #reload-page.job-page{data: { cache_signature: cache_signature, reload_timeout: reload_timeout}}

    .orientation.row

      .col-md-4
        %ol.breadcrumb.pull-left
          = render '/breadcrumbs/workspace_job', job: job
      .col-md-8
        %ol.breadcrumb.with-circle-separator.pull-right

          %li
            = link_to analytics_workspace_job_path(job) do
              %i.icon-analytics
              Analytics

          %li
            = link_to api_browser_path("/jobs/#{job.id}")  do
              %icon.icon-api
              Job

          %li
            = link_to job_specification_workspace_job_path(job),
                class: "spec" do
              %i.icon-spec
              Job-Specification

          -if job.result.present?
            %li#result-link.reload{data: {cache_signature: job.result_summary?.to_s}}
              - if job.result
                = link_to result_workspace_job_path(job) do
                  Result
              - else
                %span.text-muted Result

          -if jcs.tree_attachments_count > 0 then
            = render '/breadcrumbs/items/tree_attachments', tree_id: job.tree_id

    %ul#job-issues.list-unstyled
      = render partial: 'issue', collection: job.job_issues, as: :issue

    #job.job{data: {id: job.id, name: job.name, state: job.state}}

      %ul.list-inline.actions.pull-right
        %li.for-signed-in-user
          = form_tag abort_workspace_job_path(job), method: 'POST' do
            = hidden_field_tag :authenticity_token, form_authenticity_token
            = button_tag type: :submit, class: "btn btn-warning" do
              %i.icon-abort
              Abort
        %li.for-signed-in-user
          = form_tag retry_and_resume_workspace_job_path(job, @filter_params.permit!), method: 'POST', remote: false do
            = hidden_field_tag :authenticity_token, form_authenticity_token
            = button_tag type: :submit, class: "btn btn-primary" do
              %i.icon-retry
              Retry &amp; Resume
        %li.for-signed-in-user
          =link_to edit_workspace_job_path(job), class: "btn btn-default" do
            %i.icon-edit
            Edit

      %h1
        Job
        %em.name= job.name

      %ul#job-info.reload.enumeration.list-unstyled.list-inline{data: {cache_signature: cache_signature}}
        %li.state
          %span<>= render "label_for_state", state: job.state
          &nbsp;
          %span>= job.state
        %li.created
          %span created
          %b<= render 'humanized_time_from_now', at: job.created_at
          - if job.created_by
            %span by
            %b= job.creator
        %li.aborted
          - if job.aborted_at
            %span aborted
            %b<= render 'humanized_time_from_now', at: job.aborted_at
          - if job.aborted_by
            %span by
            %b= job.aborter
        %li.resumed
          - if job.resumed_at
            %span retried /resumed
            %b<= render 'humanized_time_from_now', at: job.resumed_at
          - if job.resumed_by
            %span by
            %b= job.aborter



      - if job.description.present?
        .job-description= markdown(job.description.squish)

      = render 'summary_stats', job: job, cache_signature: cache_signature

      - cache relevant_ccs  do |commits_cache_signature|

        #commits.commits.reload.replace-without-animation{data: {cache_signature: commits_cache_signature}}
          %h2 #{ job.commits.count > 1 ? "Commits" : "Commit"}
          %table.commits.table.table-striped
            %thead
              %tbody
                != render partial: "commit_tr", collection: job.commits, as: :commit

      = render 'tasks', job: job, tasks: tasks

